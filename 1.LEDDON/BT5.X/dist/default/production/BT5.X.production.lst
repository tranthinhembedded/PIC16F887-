

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Thu Sep 05 06:58:57 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,merge=1,delta=2
    10                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    11                           	dabs	1,0x7E,2
    12     0000                     
    13                           ; Generated 12/10/2023 GMT
    14                           ; 
    15                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    16                           ; All rights reserved.
    17                           ; 
    18                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    19                           ; 
    20                           ; Redistribution and use in source and binary forms, with or without modification, are
    21                           ; permitted provided that the following conditions are met:
    22                           ; 
    23                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    24                           ;        conditions and the following disclaimer.
    25                           ; 
    26                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    27                           ;        of conditions and the following disclaimer in the documentation and/or other
    28                           ;        materials provided with the distribution. Publication is not required when
    29                           ;        this file is used in an embedded application.
    30                           ; 
    31                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    32                           ;        software without specific prior written permission.
    33                           ; 
    34                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    35                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    36                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    37                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    38                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    39                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    40                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    41                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    42                           ; 
    43                           ; 
    44                           ; Code-generator required, PIC16F887 Definitions
    45                           ; 
    46                           ; SFR Addresses
    47     0000                     	;# 
    48     0001                     	;# 
    49     0002                     	;# 
    50     0003                     	;# 
    51     0004                     	;# 
    52     0005                     	;# 
    53     0006                     	;# 
    54     0007                     	;# 
    55     0008                     	;# 
    56     0009                     	;# 
    57     000A                     	;# 
    58     000B                     	;# 
    59     000C                     	;# 
    60     000D                     	;# 
    61     000E                     	;# 
    62     000E                     	;# 
    63     000F                     	;# 
    64     0010                     	;# 
    65     0011                     	;# 
    66     0012                     	;# 
    67     0013                     	;# 
    68     0014                     	;# 
    69     0015                     	;# 
    70     0015                     	;# 
    71     0016                     	;# 
    72     0017                     	;# 
    73     0018                     	;# 
    74     0019                     	;# 
    75     001A                     	;# 
    76     001B                     	;# 
    77     001B                     	;# 
    78     001C                     	;# 
    79     001D                     	;# 
    80     001E                     	;# 
    81     001F                     	;# 
    82     0081                     	;# 
    83     0085                     	;# 
    84     0086                     	;# 
    85     0087                     	;# 
    86     0088                     	;# 
    87     0089                     	;# 
    88     008C                     	;# 
    89     008D                     	;# 
    90     008E                     	;# 
    91     008F                     	;# 
    92     0090                     	;# 
    93     0091                     	;# 
    94     0092                     	;# 
    95     0093                     	;# 
    96     0093                     	;# 
    97     0093                     	;# 
    98     0094                     	;# 
    99     0095                     	;# 
   100     0096                     	;# 
   101     0097                     	;# 
   102     0098                     	;# 
   103     0099                     	;# 
   104     009A                     	;# 
   105     009B                     	;# 
   106     009C                     	;# 
   107     009D                     	;# 
   108     009E                     	;# 
   109     009F                     	;# 
   110     0105                     	;# 
   111     0107                     	;# 
   112     0108                     	;# 
   113     0109                     	;# 
   114     010C                     	;# 
   115     010C                     	;# 
   116     010D                     	;# 
   117     010E                     	;# 
   118     010F                     	;# 
   119     0185                     	;# 
   120     0187                     	;# 
   121     0188                     	;# 
   122     0189                     	;# 
   123     018C                     	;# 
   124     018D                     	;# 
   125     0000                     	;# 
   126     0001                     	;# 
   127     0002                     	;# 
   128     0003                     	;# 
   129     0004                     	;# 
   130     0005                     	;# 
   131     0006                     	;# 
   132     0007                     	;# 
   133     0008                     	;# 
   134     0009                     	;# 
   135     000A                     	;# 
   136     000B                     	;# 
   137     000C                     	;# 
   138     000D                     	;# 
   139     000E                     	;# 
   140     000E                     	;# 
   141     000F                     	;# 
   142     0010                     	;# 
   143     0011                     	;# 
   144     0012                     	;# 
   145     0013                     	;# 
   146     0014                     	;# 
   147     0015                     	;# 
   148     0015                     	;# 
   149     0016                     	;# 
   150     0017                     	;# 
   151     0018                     	;# 
   152     0019                     	;# 
   153     001A                     	;# 
   154     001B                     	;# 
   155     001B                     	;# 
   156     001C                     	;# 
   157     001D                     	;# 
   158     001E                     	;# 
   159     001F                     	;# 
   160     0081                     	;# 
   161     0085                     	;# 
   162     0086                     	;# 
   163     0087                     	;# 
   164     0088                     	;# 
   165     0089                     	;# 
   166     008C                     	;# 
   167     008D                     	;# 
   168     008E                     	;# 
   169     008F                     	;# 
   170     0090                     	;# 
   171     0091                     	;# 
   172     0092                     	;# 
   173     0093                     	;# 
   174     0093                     	;# 
   175     0093                     	;# 
   176     0094                     	;# 
   177     0095                     	;# 
   178     0096                     	;# 
   179     0097                     	;# 
   180     0098                     	;# 
   181     0099                     	;# 
   182     009A                     	;# 
   183     009B                     	;# 
   184     009C                     	;# 
   185     009D                     	;# 
   186     009E                     	;# 
   187     009F                     	;# 
   188     0105                     	;# 
   189     0107                     	;# 
   190     0108                     	;# 
   191     0109                     	;# 
   192     010C                     	;# 
   193     010C                     	;# 
   194     010D                     	;# 
   195     010E                     	;# 
   196     010F                     	;# 
   197     0185                     	;# 
   198     0187                     	;# 
   199     0188                     	;# 
   200     0189                     	;# 
   201     018C                     	;# 
   202     018D                     	;# 
   203     0008                     _PORTD	set	8
   204     0007                     _PORTC	set	7
   205     0087                     _TRISC	set	135
   206     0088                     _TRISD	set	136
   207     0189                     _ANSELH	set	393
   208     0188                     _ANSEL	set	392
   209                           
   210                           	psect	cinit
   211     07FC                     start_initialization:	
   212                           ; #config settings
   213                           
   214     07FC                     __initialization:
   215     07FC                     end_of_initialization:	
   216                           ;End of C runtime variable initialization code
   217                           
   218     07FC                     __end_of__initialization:
   219     07FC  0183               	clrf	3
   220     07FD  120A  118A  2F7F   	ljmp	_main	;jump to C main() function
   221                           
   222                           	psect	cstackCOMMON
   223     0070                     __pcstackCOMMON:
   224     0070                     ?_sangDuoiPORTCD:
   225     0070                     ??_sangDuoiPORTCD:	
   226                           ; 1 bytes @ 0x0
   227                           
   228     0070                     ?_sangDanPORTCD:	
   229                           ; 1 bytes @ 0x0
   230                           
   231     0070                     ??_sangDanPORTCD:	
   232                           ; 1 bytes @ 0x0
   233                           
   234     0070                     ?_ledChopTat:	
   235                           ; 1 bytes @ 0x0
   236                           
   237     0070                     ??_ledChopTat:	
   238                           ; 1 bytes @ 0x0
   239                           
   240     0070                     ?_main:	
   241                           ; 1 bytes @ 0x0
   242                           
   243                           
   244                           ; 1 bytes @ 0x0
   245     0070                     	ds	3
   246     0073                     sangDuoiPORTCD@i:
   247     0073                     sangDanPORTCD@i:	
   248                           ; 2 bytes @ 0x3
   249                           
   250                           
   251                           ; 2 bytes @ 0x3
   252     0073                     	ds	2
   253     0075                     ??_main:
   254                           
   255                           ; 1 bytes @ 0x5
   256     0075                     	ds	3
   257     0078                     main@i:
   258                           
   259                           ; 1 bytes @ 0x8
   260     0078                     	ds	1
   261     0079                     main@j:
   262                           
   263                           ; 1 bytes @ 0x9
   264     0079                     	ds	1
   265                           
   266                           	psect	maintext
   267     077F                     __pmaintext:	
   268 ;;
   269 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   270 ;;
   271 ;; *************** function _main *****************
   272 ;; Defined at:
   273 ;;		line 72 in file "BT5.c"
   274 ;; Parameters:    Size  Location     Type
   275 ;;		None
   276 ;; Auto vars:     Size  Location     Type
   277 ;;  j               1    9[COMMON] unsigned char 
   278 ;;  i               1    8[COMMON] unsigned char 
   279 ;; Return value:  Size  Location     Type
   280 ;;                  1    wreg      void 
   281 ;; Registers used:
   282 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   283 ;; Tracked objects:
   284 ;;		On entry : B00/0
   285 ;;		On exit  : 0/0
   286 ;;		Unchanged: 0/0
   287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   288 ;;      Params:         0       0       0       0       0
   289 ;;      Locals:         2       0       0       0       0
   290 ;;      Temps:          3       0       0       0       0
   291 ;;      Totals:         5       0       0       0       0
   292 ;;Total ram usage:        5 bytes
   293 ;; Hardware stack levels required when called: 1
   294 ;; This function calls:
   295 ;;		_ledChopTat
   296 ;;		_sangDanPORTCD
   297 ;;		_sangDuoiPORTCD
   298 ;; This function is called by:
   299 ;;		Startup code after reset
   300 ;; This function uses a non-reentrant model
   301 ;;
   302                           
   303     077F                     _main:	
   304                           ;psect for function _main
   305                           
   306     077F                     l653:	
   307                           ;incstack = 0
   308                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   309                           
   310                           
   311                           ;BT5.c: 74:     unsigned char i, j;;BT5.c: 75:     ANSEL = 0;
   312     077F  1683               	bsf	3,5	;RP0=1, select bank3
   313     0780  1703               	bsf	3,6	;RP1=1, select bank3
   314     0781  0188               	clrf	8	;volatile
   315                           
   316                           ;BT5.c: 76:     ANSELH = 0;
   317     0782  0189               	clrf	9	;volatile
   318                           
   319                           ;BT5.c: 78:     TRISD = 0x00;
   320     0783  1683               	bsf	3,5	;RP0=1, select bank1
   321     0784  1303               	bcf	3,6	;RP1=0, select bank1
   322     0785  0188               	clrf	8	;volatile
   323                           
   324                           ;BT5.c: 79:     PORTD = 0x00;
   325     0786  1283               	bcf	3,5	;RP0=0, select bank0
   326     0787  1303               	bcf	3,6	;RP1=0, select bank0
   327     0788  0188               	clrf	8	;volatile
   328                           
   329                           ;BT5.c: 80:     TRISC = 0x00;
   330     0789  1683               	bsf	3,5	;RP0=1, select bank1
   331     078A  1303               	bcf	3,6	;RP1=0, select bank1
   332     078B  0187               	clrf	7	;volatile
   333                           
   334                           ;BT5.c: 81:     PORTC = 0x00;
   335     078C  1283               	bcf	3,5	;RP0=0, select bank0
   336     078D  1303               	bcf	3,6	;RP1=0, select bank0
   337     078E  0187               	clrf	7	;volatile
   338                           
   339                           ;BT5.c: 84:         for(i = 0; i < 2; i++)
   340     078F  01F8               	clrf	main@i
   341     0790                     l659:
   342                           
   343                           ;BT5.c: 85:         {;BT5.c: 86:         for(j = 0; j < 4; j++)
   344     0790  01F9               	clrf	main@j
   345     0791                     l665:
   346                           
   347                           ;BT5.c: 87:         {;BT5.c: 88:             ledChopTat();
   348     0791  120A  118A  2697  120A  118A  	fcall	_ledChopTat
   349     0796                     l667:
   350                           
   351                           ;BT5.c: 89:             PORTD = 0x00;
   352     0796  1283               	bcf	3,5	;RP0=0, select bank0
   353     0797  1303               	bcf	3,6	;RP1=0, select bank0
   354     0798  0188               	clrf	8	;volatile
   355     0799                     l669:
   356                           
   357                           ;BT5.c: 90:             PORTC = 0x00;
   358     0799  0187               	clrf	7	;volatile
   359     079A                     l671:
   360                           
   361                           ;BT5.c: 91:         }
   362     079A  3001               	movlw	1
   363     079B  00FF               	movwf	btemp+1
   364     079C  087F               	movf	btemp+1,w
   365     079D  07F9               	addwf	main@j,f
   366     079E                     l673:
   367     079E  3004               	movlw	4
   368     079F  0279               	subwf	main@j,w
   369     07A0  1C03               	skipc
   370     07A1  2FA3               	goto	u91
   371     07A2  2FA4               	goto	u90
   372     07A3                     u91:
   373     07A3  2F91               	goto	l665
   374     07A4                     u90:
   375     07A4                     l675:
   376                           
   377                           ;BT5.c: 92:         _delay((unsigned long)((300)*(4000000/4000.0)));
   378     07A4  3002               	movlw	2
   379     07A5  00F7               	movwf	??_main+2
   380     07A6  3086               	movlw	134
   381     07A7  00F6               	movwf	??_main+1
   382     07A8  3099               	movlw	153
   383     07A9  00F5               	movwf	??_main
   384     07AA                     u137:
   385     07AA  0BF5               	decfsz	??_main,f
   386     07AB  2FAA               	goto	u137
   387     07AC  0BF6               	decfsz	??_main+1,f
   388     07AD  2FAA               	goto	u137
   389     07AE  0BF7               	decfsz	??_main+2,f
   390     07AF  2FAA               	goto	u137
   391     07B0                     l677:
   392                           
   393                           ;BT5.c: 94:         for(j = 0; j < 2; j++)
   394     07B0  01F9               	clrf	main@j
   395     07B1                     l683:
   396                           
   397                           ;BT5.c: 95:         {;BT5.c: 97:             sangDuoiPORTCD();
   398     07B1  120A  118A  26BC  120A  118A  	fcall	_sangDuoiPORTCD
   399     07B6                     l685:
   400                           
   401                           ;BT5.c: 99:         }
   402     07B6  3001               	movlw	1
   403     07B7  00FF               	movwf	btemp+1
   404     07B8  087F               	movf	btemp+1,w
   405     07B9  07F9               	addwf	main@j,f
   406     07BA                     l687:
   407     07BA  3002               	movlw	2
   408     07BB  0279               	subwf	main@j,w
   409     07BC  1C03               	skipc
   410     07BD  2FBF               	goto	u101
   411     07BE  2FC0               	goto	u100
   412     07BF                     u101:
   413     07BF  2FB1               	goto	l683
   414     07C0                     u100:
   415     07C0                     l689:
   416                           
   417                           ;BT5.c: 100:         _delay((unsigned long)((300)*(4000000/4000.0)));
   418     07C0  3002               	movlw	2
   419     07C1  00F7               	movwf	??_main+2
   420     07C2  3086               	movlw	134
   421     07C3  00F6               	movwf	??_main+1
   422     07C4  3099               	movlw	153
   423     07C5  00F5               	movwf	??_main
   424     07C6                     u147:
   425     07C6  0BF5               	decfsz	??_main,f
   426     07C7  2FC6               	goto	u147
   427     07C8  0BF6               	decfsz	??_main+1,f
   428     07C9  2FC6               	goto	u147
   429     07CA  0BF7               	decfsz	??_main+2,f
   430     07CB  2FC6               	goto	u147
   431     07CC                     l691:
   432                           
   433                           ;BT5.c: 102:         for(j = 0; j < 3; j++)
   434     07CC  01F9               	clrf	main@j
   435     07CD                     l697:
   436                           
   437                           ;BT5.c: 103:         {;BT5.c: 104:             sangDanPORTCD();
   438     07CD  120A  118A  271C  120A  118A  	fcall	_sangDanPORTCD
   439     07D2                     l699:
   440                           
   441                           ;BT5.c: 106:         }
   442     07D2  3001               	movlw	1
   443     07D3  00FF               	movwf	btemp+1
   444     07D4  087F               	movf	btemp+1,w
   445     07D5  07F9               	addwf	main@j,f
   446     07D6                     l701:
   447     07D6  3003               	movlw	3
   448     07D7  0279               	subwf	main@j,w
   449     07D8  1C03               	skipc
   450     07D9  2FDB               	goto	u111
   451     07DA  2FDC               	goto	u110
   452     07DB                     u111:
   453     07DB  2FCD               	goto	l697
   454     07DC                     u110:
   455     07DC                     l703:
   456                           
   457                           ;BT5.c: 107:         _delay((unsigned long)((300)*(4000000/4000.0)));
   458     07DC  3002               	movlw	2
   459     07DD  00F7               	movwf	??_main+2
   460     07DE  3086               	movlw	134
   461     07DF  00F6               	movwf	??_main+1
   462     07E0  3099               	movlw	153
   463     07E1  00F5               	movwf	??_main
   464     07E2                     u157:
   465     07E2  0BF5               	decfsz	??_main,f
   466     07E3  2FE2               	goto	u157
   467     07E4  0BF6               	decfsz	??_main+1,f
   468     07E5  2FE2               	goto	u157
   469     07E6  0BF7               	decfsz	??_main+2,f
   470     07E7  2FE2               	goto	u157
   471     07E8                     l705:
   472                           
   473                           ;BT5.c: 109:         }
   474     07E8  3001               	movlw	1
   475     07E9  00FF               	movwf	btemp+1
   476     07EA  087F               	movf	btemp+1,w
   477     07EB  07F8               	addwf	main@i,f
   478     07EC                     l707:
   479     07EC  3002               	movlw	2
   480     07ED  0278               	subwf	main@i,w
   481     07EE  1C03               	skipc
   482     07EF  2FF1               	goto	u121
   483     07F0  2FF2               	goto	u120
   484     07F1                     u121:
   485     07F1  2F90               	goto	l659
   486     07F2                     u120:
   487     07F2                     l709:
   488                           
   489                           ;BT5.c: 112:      PORTD = 0xFF; PORTC = 0xFF;
   490     07F2  30FF               	movlw	255
   491     07F3  1283               	bcf	3,5	;RP0=0, select bank0
   492     07F4  1303               	bcf	3,6	;RP1=0, select bank0
   493     07F5  0088               	movwf	8	;volatile
   494     07F6  30FF               	movlw	255
   495     07F7  0087               	movwf	7	;volatile
   496     07F8                     l44:	
   497                           ;BT5.c: 113:      while(1);
   498                           
   499     07F8                     l45:
   500     07F8  2FF8               	goto	l44
   501     07F9  120A  118A  2800   	ljmp	start
   502     07FC                     __end_of_main:
   503                           
   504                           	psect	text1
   505     06BC                     __ptext1:	
   506 ;; *************** function _sangDuoiPORTCD *****************
   507 ;; Defined at:
   508 ;;		line 23 in file "BT5.c"
   509 ;; Parameters:    Size  Location     Type
   510 ;;		None
   511 ;; Auto vars:     Size  Location     Type
   512 ;;  i               2    3[COMMON] int 
   513 ;; Return value:  Size  Location     Type
   514 ;;                  1    wreg      void 
   515 ;; Registers used:
   516 ;;		wreg, status,2, status,0, btemp+1
   517 ;; Tracked objects:
   518 ;;		On entry : 0/0
   519 ;;		On exit  : 0/0
   520 ;;		Unchanged: 0/0
   521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   522 ;;      Params:         0       0       0       0       0
   523 ;;      Locals:         2       0       0       0       0
   524 ;;      Temps:          3       0       0       0       0
   525 ;;      Totals:         5       0       0       0       0
   526 ;;Total ram usage:        5 bytes
   527 ;; Hardware stack levels used: 1
   528 ;; This function calls:
   529 ;;		Nothing
   530 ;; This function is called by:
   531 ;;		_main
   532 ;; This function uses a non-reentrant model
   533 ;;
   534                           
   535     06BC                     _sangDuoiPORTCD:	
   536                           ;psect for function _sangDuoiPORTCD
   537                           
   538     06BC                     l591:	
   539                           ;incstack = 0
   540                           ; Regs used in _sangDuoiPORTCD: [wreg+status,2+status,0+btemp+1]
   541                           
   542                           
   543                           ;BT5.c: 25:     for(int i = 0; i < 16; i++) {
   544     06BC  01F3               	clrf	sangDuoiPORTCD@i
   545     06BD  01F4               	clrf	sangDuoiPORTCD@i+1
   546     06BE                     l593:
   547     06BE  0874               	movf	sangDuoiPORTCD@i+1,w
   548     06BF  3A80               	xorlw	128
   549     06C0  00FF               	movwf	btemp+1
   550     06C1  3080               	movlw	128
   551     06C2  027F               	subwf	btemp+1,w
   552     06C3  1D03               	skipz
   553     06C4  2EC7               	goto	u15
   554     06C5  3010               	movlw	16
   555     06C6  0273               	subwf	sangDuoiPORTCD@i,w
   556     06C7                     u15:
   557     06C7  1C03               	skipc
   558     06C8  2ECA               	goto	u11
   559     06C9  2ECB               	goto	u10
   560     06CA                     u11:
   561     06CA  2ECC               	goto	l597
   562     06CB                     u10:
   563     06CB  2F0B               	goto	l613
   564     06CC                     l597:
   565                           
   566                           ;BT5.c: 26:             if(i < 8) {
   567     06CC  0874               	movf	sangDuoiPORTCD@i+1,w
   568     06CD  3A80               	xorlw	128
   569     06CE  00FF               	movwf	btemp+1
   570     06CF  3080               	movlw	128
   571     06D0  027F               	subwf	btemp+1,w
   572     06D1  1D03               	skipz
   573     06D2  2ED5               	goto	u25
   574     06D3  3008               	movlw	8
   575     06D4  0273               	subwf	sangDuoiPORTCD@i,w
   576     06D5                     u25:
   577     06D5  1803               	skipnc
   578     06D6  2ED8               	goto	u21
   579     06D7  2ED9               	goto	u20
   580     06D8                     u21:
   581     06D8  2EE8               	goto	l603
   582     06D9                     u20:
   583     06D9                     l599:
   584                           
   585                           ;BT5.c: 27:                 PORTC = (1 << i);
   586     06D9  3001               	movlw	1
   587     06DA  00F0               	movwf	??_sangDuoiPORTCD
   588     06DB  0A73               	incf	sangDuoiPORTCD@i,w
   589     06DC  2EDF               	goto	u34
   590     06DD                     u35:
   591     06DD  1003               	clrc
   592     06DE  0DF0               	rlf	??_sangDuoiPORTCD,f
   593     06DF                     u34:
   594     06DF  3EFF               	addlw	-1
   595     06E0  1D03               	skipz
   596     06E1  2EDD               	goto	u35
   597     06E2  0870               	movf	??_sangDuoiPORTCD,w
   598     06E3  1283               	bcf	3,5	;RP0=0, select bank0
   599     06E4  1303               	bcf	3,6	;RP1=0, select bank0
   600     06E5  0087               	movwf	7	;volatile
   601     06E6                     l601:
   602                           
   603                           ;BT5.c: 28:                 PORTD = 0x00;
   604     06E6  0188               	clrf	8	;volatile
   605                           
   606                           ;BT5.c: 29:             } else {
   607     06E7  2EF8               	goto	l607
   608     06E8                     l603:
   609                           
   610                           ;BT5.c: 30:                 PORTD = (1 << (i - 8));
   611     06E8  3001               	movlw	1
   612     06E9  00F0               	movwf	??_sangDuoiPORTCD
   613     06EA  0873               	movf	sangDuoiPORTCD@i,w
   614     06EB  3EF8               	addlw	-8
   615     06EC  3E01               	addlw	1
   616     06ED  2EF0               	goto	u44
   617     06EE                     u45:
   618     06EE  1003               	clrc
   619     06EF  0DF0               	rlf	??_sangDuoiPORTCD,f
   620     06F0                     u44:
   621     06F0  3EFF               	addlw	-1
   622     06F1  1D03               	skipz
   623     06F2  2EEE               	goto	u45
   624     06F3  0870               	movf	??_sangDuoiPORTCD,w
   625     06F4  1283               	bcf	3,5	;RP0=0, select bank0
   626     06F5  1303               	bcf	3,6	;RP1=0, select bank0
   627     06F6  0088               	movwf	8	;volatile
   628     06F7                     l605:
   629                           
   630                           ;BT5.c: 31:                 PORTC = 0x00;
   631     06F7  0187               	clrf	7	;volatile
   632     06F8                     l607:
   633                           
   634                           ;BT5.c: 33:             _delay((unsigned long)((300)*(4000000/4000.0)));
   635     06F8  3002               	movlw	2
   636     06F9  00F2               	movwf	??_sangDuoiPORTCD+2
   637     06FA  3086               	movlw	134
   638     06FB  00F1               	movwf	??_sangDuoiPORTCD+1
   639     06FC  3099               	movlw	153
   640     06FD  00F0               	movwf	??_sangDuoiPORTCD
   641     06FE                     u167:
   642     06FE  0BF0               	decfsz	??_sangDuoiPORTCD,f
   643     06FF  2EFE               	goto	u167
   644     0700  0BF1               	decfsz	??_sangDuoiPORTCD+1,f
   645     0701  2EFE               	goto	u167
   646     0702  0BF2               	decfsz	??_sangDuoiPORTCD+2,f
   647     0703  2EFE               	goto	u167
   648     0704                     l609:
   649                           
   650                           ;BT5.c: 34:         }
   651     0704  3001               	movlw	1
   652     0705  07F3               	addwf	sangDuoiPORTCD@i,f
   653     0706  1803               	skipnc
   654     0707  0AF4               	incf	sangDuoiPORTCD@i+1,f
   655     0708  3000               	movlw	0
   656     0709  07F4               	addwf	sangDuoiPORTCD@i+1,f
   657     070A  2EBE               	goto	l593
   658     070B                     l613:
   659                           
   660                           ;BT5.c: 35:         PORTC = 0x00;
   661     070B  1283               	bcf	3,5	;RP0=0, select bank0
   662     070C  1303               	bcf	3,6	;RP1=0, select bank0
   663     070D  0187               	clrf	7	;volatile
   664                           
   665                           ;BT5.c: 36:         PORTD = 0x00;
   666     070E  0188               	clrf	8	;volatile
   667     070F                     l615:
   668                           
   669                           ;BT5.c: 37:         _delay((unsigned long)((300)*(4000000/4000.0)));
   670     070F  3002               	movlw	2
   671     0710  00F2               	movwf	??_sangDuoiPORTCD+2
   672     0711  3086               	movlw	134
   673     0712  00F1               	movwf	??_sangDuoiPORTCD+1
   674     0713  3099               	movlw	153
   675     0714  00F0               	movwf	??_sangDuoiPORTCD
   676     0715                     u177:
   677     0715  0BF0               	decfsz	??_sangDuoiPORTCD,f
   678     0716  2F15               	goto	u177
   679     0717  0BF1               	decfsz	??_sangDuoiPORTCD+1,f
   680     0718  2F15               	goto	u177
   681     0719  0BF2               	decfsz	??_sangDuoiPORTCD+2,f
   682     071A  2F15               	goto	u177
   683     071B                     l21:
   684     071B  0008               	return
   685     071C                     __end_of_sangDuoiPORTCD:
   686                           
   687                           	psect	text2
   688     071C                     __ptext2:	
   689 ;; *************** function _sangDanPORTCD *****************
   690 ;; Defined at:
   691 ;;		line 41 in file "BT5.c"
   692 ;; Parameters:    Size  Location     Type
   693 ;;		None
   694 ;; Auto vars:     Size  Location     Type
   695 ;;  i               2    3[COMMON] int 
   696 ;; Return value:  Size  Location     Type
   697 ;;                  1    wreg      void 
   698 ;; Registers used:
   699 ;;		wreg, status,2, status,0, btemp+1
   700 ;; Tracked objects:
   701 ;;		On entry : 0/0
   702 ;;		On exit  : 0/0
   703 ;;		Unchanged: 0/0
   704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   705 ;;      Params:         0       0       0       0       0
   706 ;;      Locals:         2       0       0       0       0
   707 ;;      Temps:          3       0       0       0       0
   708 ;;      Totals:         5       0       0       0       0
   709 ;;Total ram usage:        5 bytes
   710 ;; Hardware stack levels used: 1
   711 ;; This function calls:
   712 ;;		Nothing
   713 ;; This function is called by:
   714 ;;		_main
   715 ;; This function uses a non-reentrant model
   716 ;;
   717                           
   718     071C                     _sangDanPORTCD:	
   719                           ;psect for function _sangDanPORTCD
   720                           
   721     071C                     l617:	
   722                           ;incstack = 0
   723                           ; Regs used in _sangDanPORTCD: [wreg+status,2+status,0+btemp+1]
   724                           
   725                           
   726                           ;BT5.c: 43:         for(int i = 0; i < 16; i++) {
   727     071C  01F3               	clrf	sangDanPORTCD@i
   728     071D  01F4               	clrf	sangDanPORTCD@i+1
   729     071E                     l623:
   730                           
   731                           ;BT5.c: 44:             if(i < 8) {
   732     071E  0874               	movf	sangDanPORTCD@i+1,w
   733     071F  3A80               	xorlw	128
   734     0720  00FF               	movwf	btemp+1
   735     0721  3080               	movlw	128
   736     0722  027F               	subwf	btemp+1,w
   737     0723  1D03               	skipz
   738     0724  2F27               	goto	u55
   739     0725  3008               	movlw	8
   740     0726  0273               	subwf	sangDanPORTCD@i,w
   741     0727                     u55:
   742     0727  1803               	skipnc
   743     0728  2F2A               	goto	u51
   744     0729  2F2B               	goto	u50
   745     072A                     u51:
   746     072A  2F3C               	goto	l629
   747     072B                     u50:
   748     072B                     l625:
   749                           
   750                           ;BT5.c: 45:                 PORTC |= (1 << i);
   751     072B  3001               	movlw	1
   752     072C  00F0               	movwf	??_sangDanPORTCD
   753     072D  0A73               	incf	sangDanPORTCD@i,w
   754     072E  2F31               	goto	u64
   755     072F                     u65:
   756     072F  1003               	clrc
   757     0730  0DF0               	rlf	??_sangDanPORTCD,f
   758     0731                     u64:
   759     0731  3EFF               	addlw	-1
   760     0732  1D03               	skipz
   761     0733  2F2F               	goto	u65
   762     0734  0870               	movf	??_sangDanPORTCD,w
   763     0735  00FF               	movwf	btemp+1
   764     0736  087F               	movf	btemp+1,w
   765     0737  1283               	bcf	3,5	;RP0=0, select bank0
   766     0738  1303               	bcf	3,6	;RP1=0, select bank0
   767     0739  0487               	iorwf	7,f	;volatile
   768     073A                     l627:
   769                           
   770                           ;BT5.c: 46:                 PORTD = 0x00;
   771     073A  0188               	clrf	8	;volatile
   772                           
   773                           ;BT5.c: 47:             } else {
   774     073B  2F4F               	goto	l633
   775     073C                     l629:
   776                           
   777                           ;BT5.c: 48:                 PORTC = 0xFF;
   778     073C  30FF               	movlw	255
   779     073D  1283               	bcf	3,5	;RP0=0, select bank0
   780     073E  1303               	bcf	3,6	;RP1=0, select bank0
   781     073F  0087               	movwf	7	;volatile
   782     0740                     l631:
   783                           
   784                           ;BT5.c: 49:                 PORTD |= (1 << (i-8));
   785     0740  3001               	movlw	1
   786     0741  00F0               	movwf	??_sangDanPORTCD
   787     0742  0873               	movf	sangDanPORTCD@i,w
   788     0743  3EF8               	addlw	-8
   789     0744  3E01               	addlw	1
   790     0745  2F48               	goto	u74
   791     0746                     u75:
   792     0746  1003               	clrc
   793     0747  0DF0               	rlf	??_sangDanPORTCD,f
   794     0748                     u74:
   795     0748  3EFF               	addlw	-1
   796     0749  1D03               	skipz
   797     074A  2F46               	goto	u75
   798     074B  0870               	movf	??_sangDanPORTCD,w
   799     074C  00FF               	movwf	btemp+1
   800     074D  087F               	movf	btemp+1,w
   801     074E  0488               	iorwf	8,f	;volatile
   802     074F                     l633:
   803                           
   804                           ;BT5.c: 52:             _delay((unsigned long)((300)*(4000000/4000.0)));
   805     074F  3002               	movlw	2
   806     0750  00F2               	movwf	??_sangDanPORTCD+2
   807     0751  3086               	movlw	134
   808     0752  00F1               	movwf	??_sangDanPORTCD+1
   809     0753  3099               	movlw	153
   810     0754  00F0               	movwf	??_sangDanPORTCD
   811     0755                     u187:
   812     0755  0BF0               	decfsz	??_sangDanPORTCD,f
   813     0756  2F55               	goto	u187
   814     0757  0BF1               	decfsz	??_sangDanPORTCD+1,f
   815     0758  2F55               	goto	u187
   816     0759  0BF2               	decfsz	??_sangDanPORTCD+2,f
   817     075A  2F55               	goto	u187
   818     075B                     l635:
   819                           
   820                           ;BT5.c: 53:         }
   821     075B  3001               	movlw	1
   822     075C  07F3               	addwf	sangDanPORTCD@i,f
   823     075D  1803               	skipnc
   824     075E  0AF4               	incf	sangDanPORTCD@i+1,f
   825     075F  3000               	movlw	0
   826     0760  07F4               	addwf	sangDanPORTCD@i+1,f
   827     0761                     l637:
   828     0761  0874               	movf	sangDanPORTCD@i+1,w
   829     0762  3A80               	xorlw	128
   830     0763  00FF               	movwf	btemp+1
   831     0764  3080               	movlw	128
   832     0765  027F               	subwf	btemp+1,w
   833     0766  1D03               	skipz
   834     0767  2F6A               	goto	u85
   835     0768  3010               	movlw	16
   836     0769  0273               	subwf	sangDanPORTCD@i,w
   837     076A                     u85:
   838     076A  1C03               	skipc
   839     076B  2F6D               	goto	u81
   840     076C  2F6E               	goto	u80
   841     076D                     u81:
   842     076D  2F1E               	goto	l623
   843     076E                     u80:
   844     076E                     l639:
   845                           
   846                           ;BT5.c: 54:         PORTC = 0x00;
   847     076E  1283               	bcf	3,5	;RP0=0, select bank0
   848     076F  1303               	bcf	3,6	;RP1=0, select bank0
   849     0770  0187               	clrf	7	;volatile
   850                           
   851                           ;BT5.c: 55:         PORTD = 0x00;
   852     0771  0188               	clrf	8	;volatile
   853     0772                     l641:
   854                           
   855                           ;BT5.c: 56:         _delay((unsigned long)((300)*(4000000/4000.0)));
   856     0772  3002               	movlw	2
   857     0773  00F2               	movwf	??_sangDanPORTCD+2
   858     0774  3086               	movlw	134
   859     0775  00F1               	movwf	??_sangDanPORTCD+1
   860     0776  3099               	movlw	153
   861     0777  00F0               	movwf	??_sangDanPORTCD
   862     0778                     u197:
   863     0778  0BF0               	decfsz	??_sangDanPORTCD,f
   864     0779  2F78               	goto	u197
   865     077A  0BF1               	decfsz	??_sangDanPORTCD+1,f
   866     077B  2F78               	goto	u197
   867     077C  0BF2               	decfsz	??_sangDanPORTCD+2,f
   868     077D  2F78               	goto	u197
   869     077E                     l28:
   870     077E  0008               	return
   871     077F                     __end_of_sangDanPORTCD:
   872                           
   873                           	psect	text3
   874     0697                     __ptext3:	
   875 ;; *************** function _ledChopTat *****************
   876 ;; Defined at:
   877 ;;		line 62 in file "BT5.c"
   878 ;; Parameters:    Size  Location     Type
   879 ;;		None
   880 ;; Auto vars:     Size  Location     Type
   881 ;;		None
   882 ;; Return value:  Size  Location     Type
   883 ;;                  1    wreg      void 
   884 ;; Registers used:
   885 ;;		wreg, status,2
   886 ;; Tracked objects:
   887 ;;		On entry : 0/0
   888 ;;		On exit  : 0/0
   889 ;;		Unchanged: 0/0
   890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   891 ;;      Params:         0       0       0       0       0
   892 ;;      Locals:         0       0       0       0       0
   893 ;;      Temps:          3       0       0       0       0
   894 ;;      Totals:         3       0       0       0       0
   895 ;;Total ram usage:        3 bytes
   896 ;; Hardware stack levels used: 1
   897 ;; This function calls:
   898 ;;		Nothing
   899 ;; This function is called by:
   900 ;;		_main
   901 ;; This function uses a non-reentrant model
   902 ;;
   903                           
   904     0697                     _ledChopTat:	
   905                           ;psect for function _ledChopTat
   906                           
   907     0697                     l643:	
   908                           ;incstack = 0
   909                           ; Regs used in _ledChopTat: [wreg+status,2]
   910                           
   911                           
   912                           ;BT5.c: 64:     PORTD = 0x00;
   913     0697  1283               	bcf	3,5	;RP0=0, select bank0
   914     0698  1303               	bcf	3,6	;RP1=0, select bank0
   915     0699  0188               	clrf	8	;volatile
   916                           
   917                           ;BT5.c: 65:     PORTC = 0x00;
   918     069A  0187               	clrf	7	;volatile
   919     069B                     l645:
   920                           
   921                           ;BT5.c: 66:     _delay((unsigned long)((500)*(4000000/4000.0)));
   922     069B  3003               	movlw	3
   923     069C  00F2               	movwf	??_ledChopTat+2
   924     069D  308A               	movlw	138
   925     069E  00F1               	movwf	??_ledChopTat+1
   926     069F  3055               	movlw	85
   927     06A0  00F0               	movwf	??_ledChopTat
   928     06A1                     u207:
   929     06A1  0BF0               	decfsz	??_ledChopTat,f
   930     06A2  2EA1               	goto	u207
   931     06A3  0BF1               	decfsz	??_ledChopTat+1,f
   932     06A4  2EA1               	goto	u207
   933     06A5  0BF2               	decfsz	??_ledChopTat+2,f
   934     06A6  2EA1               	goto	u207
   935     06A7  2EA8               	nop2
   936     06A8                     l647:
   937                           
   938                           ;BT5.c: 67:     PORTD = 0xFF;
   939     06A8  30FF               	movlw	255
   940     06A9  1283               	bcf	3,5	;RP0=0, select bank0
   941     06AA  1303               	bcf	3,6	;RP1=0, select bank0
   942     06AB  0088               	movwf	8	;volatile
   943     06AC                     l649:
   944                           
   945                           ;BT5.c: 68:     PORTC = 0xFF;
   946     06AC  30FF               	movlw	255
   947     06AD  0087               	movwf	7	;volatile
   948     06AE                     l651:
   949                           
   950                           ;BT5.c: 69:     _delay((unsigned long)((500)*(4000000/4000.0)));
   951     06AE  3003               	movlw	3
   952     06AF  00F2               	movwf	??_ledChopTat+2
   953     06B0  308A               	movlw	138
   954     06B1  00F1               	movwf	??_ledChopTat+1
   955     06B2  3055               	movlw	85
   956     06B3  00F0               	movwf	??_ledChopTat
   957     06B4                     u217:
   958     06B4  0BF0               	decfsz	??_ledChopTat,f
   959     06B5  2EB4               	goto	u217
   960     06B6  0BF1               	decfsz	??_ledChopTat+1,f
   961     06B7  2EB4               	goto	u217
   962     06B8  0BF2               	decfsz	??_ledChopTat+2,f
   963     06B9  2EB4               	goto	u217
   964     06BA  2EBB               	nop2
   965     06BB                     l31:
   966     06BB  0008               	return
   967     06BC                     __end_of_ledChopTat:
   968     007E                     btemp	set	126	;btemp
   969     007E                     wtemp0	set	126
   970                           
   971                           	psect	config
   972                           
   973                           ;Config register CONFIG1 @ 0x2007
   974                           ;	Oscillator Selection bits
   975                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
   976                           ;	Watchdog Timer Enable bit
   977                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   978                           ;	Power-up Timer Enable bit
   979                           ;	PWRTE = OFF, PWRT disabled
   980                           ;	RE3/MCLR pin function select bit
   981                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
   982                           ;	Code Protection bit
   983                           ;	CP = OFF, Program memory code protection is disabled
   984                           ;	Data Code Protection bit
   985                           ;	CPD = OFF, Data memory code protection is disabled
   986                           ;	Brown Out Reset Selection bits
   987                           ;	BOREN = OFF, BOR disabled
   988                           ;	Internal External Switchover bit
   989                           ;	IESO = OFF, Internal/External Switchover mode is disabled
   990                           ;	Fail-Safe Clock Monitor Enabled bit
   991                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
   992                           ;	Low Voltage Programming Enable bit
   993                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   994                           ;	In-Circuit Debugger Mode bit
   995                           ;	DEBUG = 0x1, unprogrammed default
   996     2007                     	org	8199
   997     2007  20F2               	dw	8434
   998                           
   999                           ;Config register CONFIG2 @ 0x2008
  1000                           ;	Brown-out Reset Selection bit
  1001                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1002                           ;	Flash Program Memory Self Write Enable bits
  1003                           ;	WRT = OFF, Write protection off
  1004     2008                     	org	8200
  1005     2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      10
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_sangDanPORTCD
    _main->_sangDuoiPORTCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0     270
                                              5 COMMON     5     5      0
                         _ledChopTat
                      _sangDanPORTCD
                     _sangDuoiPORTCD
 ---------------------------------------------------------------------------------
 (1) _sangDuoiPORTCD                                       5     5      0      75
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _sangDanPORTCD                                        5     5      0      75
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _ledChopTat                                           3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ledChopTat
   _sangDanPORTCD
   _sangDuoiPORTCD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Thu Sep 05 06:58:57 2024

                     l21 071B                       l31 06BB                       l28 077E  
                     l44 07F8                       l45 07F8                       u10 06CB  
                     u11 06CA                       u20 06D9                       u21 06D8  
                     u15 06C7                       u25 06D5                       u50 072B  
                     u34 06DF                       u51 072A                       u35 06DD  
                     u44 06F0                       u45 06EE                       u55 0727  
                     u80 076E                       u64 0731                       u81 076D  
                     u65 072F                       u74 0748                       u90 07A4  
                     u75 0746                       u91 07A3                       u85 076A  
                    l601 06E6                      l603 06E8                      l605 06F7  
                    l613 070B                      l701 07D6                      l631 0740  
                    l623 071E                      l615 070F                      l607 06F8  
                    l703 07DC                      l641 0772                      l633 074F  
                    l625 072B                      l617 071C                      l609 0704  
                    l705 07E8                      l651 06AE                      l643 0697  
                    l635 075B                      l627 073A                      l707 07EC  
                    l645 069B                      l637 0761                      l629 073C  
                    l709 07F2                      l653 077F                      l647 06A8  
                    l639 076E                      l591 06BC                      l671 079A  
                    l649 06AC                      l593 06BE                      l673 079E  
                    l665 0791                      l691 07CC                      l683 07B1  
                    l675 07A4                      l667 0796                      l659 0790  
                    l597 06CC                      l685 07B6                      l677 07B0  
                    l669 0799                      l599 06D9                      l687 07BA  
                    l697 07CD                      l689 07C0                      l699 07D2  
                    u100 07C0                      u101 07BF                      u110 07DC  
                    u111 07DB                      u120 07F2                      u121 07F1  
                    u207 06A1                      u217 06B4                      u137 07AA  
                    u147 07C6                      u157 07E2                      u167 06FE  
                    u177 0715                      u187 0755                      u197 0778  
                   _main 077F                     btemp 007E                     start 0000  
                  ?_main 0070                    _ANSEL 0188                    _PORTC 0007  
                  _PORTD 0008                    _TRISC 0087                    _TRISD 0088  
                  main@i 0078                    main@j 0079                    status 0003  
                  wtemp0 007E          __initialization 07FC             __end_of_main 07FC  
                 ??_main 0075                   _ANSELH 0189         ??_sangDuoiPORTCD 0070  
__end_of__initialization 07FC           __pcstackCOMMON 0070               __pmaintext 077F  
             _ledChopTat 0697            _sangDanPORTCD 071C                  __ptext1 06BC  
                __ptext2 071C                  __ptext3 0697           ?_sangDanPORTCD 0070  
        sangDuoiPORTCD@i 0073     end_of_initialization 07FC              ?_ledChopTat 0070  
        ??_sangDanPORTCD 0070      start_initialization 07FC                ___latbits 0002  
           ??_ledChopTat 0070       __end_of_ledChopTat 06BC           _sangDuoiPORTCD 06BC  
  __end_of_sangDanPORTCD 077F   __end_of_sangDuoiPORTCD 071C          ?_sangDuoiPORTCD 0070  
         sangDanPORTCD@i 0073  
